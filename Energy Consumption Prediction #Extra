
Energy Consumption Prediction:

df = df[['Global_active_power', 'Global_reactive_power', 'Voltage',
       'Global_intensity', 'Sub_metering_2', 'Sub_metering_1','Sub_metering_3']]
       
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
    n_vars = 1 if type(data) is list else data.shape[1]
    dff = pd.DataFrame(data)
    cols, names = list(), list()
    for i in range(n_in, 0, -1):
        cols.append(dff.shift(-i))
        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
    for i in range(0, n_out):
        cols.append(dff.shift(-i))
        if i==0:
            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
        else:
            names += [('var%d(t+%d)' % (j+1)) for j in range(n_vars)]        
        agg = pd.concat(cols, axis=1)
        agg.columns = names
        if dropnan:
            agg.dropna(inplace=True)
        return agg
		
		
	from sklearn.preprocessing import MinMaxScaler

	values = df_resample.values
	scaler = MinMaxScaler(feature_range=(0, 1))
	scaled = scaler.fit_transform(values)
	reframed = series_to_supervised(scaled, 1, 1)
	r = list(range(df_resample.shape[1]+1, 2*df_resample.shape[1]))
	reframed.drop(reframed.columns[r], axis=1, inplace=True)
	reframed.head()

	# Data spliting into train and test data series. Only 4000 first data points are selected for traing purpose.
	values = reframed.values
	n_train_time = 4000
	train = values[:n_train_time, :]
	test = values[n_train_time:, :]
	train_x, train_y = train[:, :-1], train[:, -1]
	test_x, test_y = test[:, :-1], test[:, -1]
	train_x = train_x.reshape((train_x.shape[0], 1, train_x.shape[1]))
	test_x = test_x.reshape((test_x.shape[0], 1, test_x.shape[1]))


		from keras.models import Sequential
	from keras.layers import LSTM
	from keras.layers import Dropout
	from keras.layers import Dense
	from sklearn.metrics import mean_squared_error,r2_score
	import matplotlib.pyplot as plt
	import numpy as np

	model = Sequential()
	model.add(LSTM(100, input_shape=(train_x.shape[1], train_x.shape[2])))
	model.add(Dropout(0.1))
	model.add(Dense(1))
	model.compile(loss='mean_squared_error', optimizer='adam')

	# Network fitting
	history = model.fit(train_x, train_y, epochs=50, batch_size=70, validation_data=(test_x, test_y), verbose=2, shuffle=False)

	# Loss history plot
	plt.plot(history.history['loss'])
	plt.plot(history.history['val_loss'])
	plt.title('model loss')
	plt.ylabel('loss')
	plt.xlabel('epoch')
	plt.legend(['train', 'test'], loc='upper right')
	plt.show()

	size = df_resample.shape[1]

	# Prediction test
	yhat = model.predict(test_x)
	test_x = test_x.reshape((test_x.shape[0], size))

	# invert scaling for prediction
	inv_yhat = np.concatenate((yhat, test_x[:, 1-size:]), axis=1)
	inv_yhat = scaler.inverse_transform(inv_yhat)
	inv_yhat = inv_yhat[:,0]

	# invert scaling for actual
	test_y = test_y.reshape((len(test_y), 1))
	inv_y = np.concatenate((test_y, test_x[:, 1-size:]), axis=1)
	inv_y = scaler.inverse_transform(inv_y)
	inv_y = inv_y[:,0]

	# calculate RMSE
	rmse = np.sqrt(mean_squared_error(inv_y, inv_yhat))
	print('Test RMSE: %.3f' % rmse)

	aa=[x for x in range(500)]
	plt.figure(figsize=(25,10)) 
	plt.plot(aa, inv_y[:500], marker='.', label="actual")
	plt.plot(aa, inv_yhat[:500], 'r', label="prediction")
	plt.ylabel(df.columns[0], size=15)
	plt.xlabel('Time step for first 500 hours', size=15)
	plt.legend(fontsize=15)
	plt.show()


https://thecleverprogrammer.com/2021/01/23/energy-consumption-prediction-with-machine-learning/ 





